#!/usr/bin/env python3

import json
import locale
import sys
import os
import emails
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib import colors


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])
  # returns Mazda Miata (1994)


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  most_sales = {'total_sales': 0}
  years = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # finds the car with the highest number of total sales
    if item["total_sales"] > most_sales['total_sales']:
      most_sales = item
    # adds each year to the dictionary and adds the value of total sales of that vehicle to the year it was sold
    year = str(item["car"]['car_year'])
    if year not in years:
      years[year] = 0
    years[year] = years[year] + item["total_sales"]
  highest_year = ''
  number_of_sales = 0
  for k in years:
    if years[k] > number_of_sales:
      highest_year = k
      number_of_sales = years[k]

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), str(max_revenue["revenue"])),
    "The {} had the most sales: {}".format(
      format_car(most_sales["car"]), str(most_sales['total_sales'])),
    "The most popular year was {} with {} sales.".format(
      highest_year, str(number_of_sales))
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # turns data into a PDF report
  report = SimpleDocTemplate("/tmp/cars.pdf")
  styles = getSampleStyleSheet()
  report_title = Paragraph("Car Sales Data", styles['h1'])
  report_summary = Paragraph('<br/>'.join(summary), styles['BodyText'])

  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  report_table = Table(data=cars_dict_to_table(data), style=table_style, hAlign="LEFT")
  report.build([report_title, report_summary, report_table])
  # send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
